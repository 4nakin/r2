// tslint:disable
import * as nock from 'nock';
import * as _ from 'lodash';
import Coincheck from '../Coincheck/BrokerAdapterImpl';
import { OrderStatus, Broker } from '../type';

const coincheck = nock('https://coincheck.com');
coincheck.get('/api/exchange/orders/opens').reply(200, { "success": true, "orders": [] });
coincheck.get('/api/exchange/orders/transactions_pagination?order=desc&limit=20').reply(200, { "success": true, "pagination": { "limit": 20, "order": "desc", "starting_after": null, "ending_before": null }, "data": [{ "id": 64395948, "order_id": 361173028, "created_at": "2017-10-28T01:20:39.000Z", "funds": { "btc": "0.01", "jpy": "-6629.07" }, "pair": "btc_jpy", "rate": "662907.0", "fee_currency": null, "fee": "0.0", "liquidity": "T", "side": "buy" }, { "id": 60254118, "order_id": 340598284, "created_at": "2017-10-22T07:43:18.000Z", "funds": { "btc": "-0.005", "jpy": "3371.125" }, "pair": "btc_jpy", "rate": "674225.0", "fee_currency": null, "fee": "0.0", "liquidity": "T", "side": "sell" }, { "id": 60253344, "order_id": 340595769, "created_at": "2017-10-22T07:42:30.000Z", "funds": { "btc": "0.005", "jpy": "-3382.36" }, "pair": "btc_jpy", "rate": "676472.0", "fee_currency": null, "fee": "0.0", "liquidity": "T", "side": "buy" }, { "id": 60217196, "order_id": 340460505, "created_at": "2017-10-22T06:55:46.000Z", "funds": { "btc": "-0.0264391", "jpy": "17565.609258" }, "pair": "btc_jpy", "rate": "664380.0", "fee_currency": null, "fee": "0.0", "liquidity": "T", "side": "sell" }, { "id": 60198060, "order_id": 340380749, "created_at": "2017-10-22T06:26:27.000Z", "funds": { "btc": "0.0264391", "jpy": "-17532.1373574" }, "pair": "btc_jpy", "rate": "663114.0", "fee_currency": null, "fee": "0.0", "liquidity": "T", "side": "buy" }, { "id": 60196501, "order_id": 340367172, "created_at": "2017-10-22T06:25:07.000Z", "funds": { "btc": "-0.02646992", "jpy": "17470.1472" }, "pair": "btc_jpy", "rate": "660000.0", "fee_currency": null, "fee": "0.0", "liquidity": "M", "side": "sell" }, { "id": 60194500, "order_id": 340366746, "created_at": "2017-10-22T06:21:43.000Z", "funds": { "btc": "0.005", "jpy": "-3290.0" }, "pair": "btc_jpy", "rate": "658000.0", "fee_currency": null, "fee": "0.0", "liquidity": "T", "side": "buy" }, { "id": 60194498, "order_id": 340366746, "created_at": "2017-10-22T06:21:43.000Z", "funds": { "btc": "0.013", "jpy": "-8554.0" }, "pair": "btc_jpy", "rate": "658000.0", "fee_currency": null, "fee": "0.0", "liquidity": "T", "side": "buy" }, { "id": 60194497, "order_id": 340366746, "created_at": "2017-10-22T06:21:43.000Z", "funds": { "btc": "0.00846992", "jpy": "-5573.20736" }, "pair": "btc_jpy", "rate": "658000.0", "fee_currency": null, "fee": "0.0", "liquidity": "T", "side": "buy" }, { "id": 60192725, "order_id": 340358309, "created_at": "2017-10-22T06:20:02.000Z", "funds": { "btc": "-0.02638018", "jpy": "17384.53862" }, "pair": "btc_jpy", "rate": "659000.0", "fee_currency": null, "fee": "0.0", "liquidity": "M", "side": "sell" }, { "id": 60188314, "order_id": 340347768, "created_at": "2017-10-22T06:15:37.000Z", "funds": { "btc": "0.02638018", "jpy": "-17351.19407248" }, "pair": "btc_jpy", "rate": "657736.0", "fee_currency": null, "fee": "0.0", "liquidity": "T", "side": "buy" }, { "id": 60187543, "order_id": 340343952, "created_at": "2017-10-22T06:14:28.000Z", "funds": { "btc": "-0.005", "jpy": "3305.0" }, "pair": "btc_jpy", "rate": "661000.0", "fee_currency": null, "fee": "0.0", "liquidity": "M", "side": "sell" }, { "id": 60187540, "order_id": 340344075, "created_at": "2017-10-22T06:14:28.000Z", "funds": { "btc": "-0.005", "jpy": "3305.0" }, "pair": "btc_jpy", "rate": "661000.0", "fee_currency": null, "fee": "0.0", "liquidity": "M", "side": "sell" }, { "id": 60187521, "order_id": 340343675, "created_at": "2017-10-22T06:14:28.000Z", "funds": { "btc": "-0.02102674", "jpy": "13898.67514" }, "pair": "btc_jpy", "rate": "661000.0", "fee_currency": null, "fee": "0.0", "liquidity": "M", "side": "sell" }, { "id": 60183870, "order_id": 340328748, "created_at": "2017-10-22T06:08:57.000Z", "funds": { "btc": "0.02102674", "jpy": "-13864.38052706" }, "pair": "btc_jpy", "rate": "659369.0", "fee_currency": null, "fee": "0.0", "liquidity": "T", "side": "buy" }, { "id": 60182224, "order_id": 340323654, "created_at": "2017-10-22T06:07:12.000Z", "funds": { "btc": "0.005005", "jpy": "-3295.74245" }, "pair": "btc_jpy", "rate": "658490.0", "fee_currency": null, "fee": "0.0", "liquidity": "T", "side": "buy" }, { "id": 60182184, "order_id": 340323466, "created_at": "2017-10-22T06:07:08.000Z", "funds": { "btc": "0.005005", "jpy": "-3297.719425" }, "pair": "btc_jpy", "rate": "658885.0", "fee_currency": null, "fee": "0.0", "liquidity": "T", "side": "buy" }, { "id": 60182130, "order_id": 340323117, "created_at": "2017-10-22T06:07:02.000Z", "funds": { "btc": "0.005005", "jpy": "-3298.295" }, "pair": "btc_jpy", "rate": "659000.0", "fee_currency": null, "fee": "0.0", "liquidity": "T", "side": "buy" }, { "id": 60182052, "order_id": 340322957, "created_at": "2017-10-22T06:06:59.000Z", "funds": { "btc": "0.005005", "jpy": "-3296.77348" }, "pair": "btc_jpy", "rate": "658696.0", "fee_currency": null, "fee": "0.0", "liquidity": "T", "side": "buy" }, { "id": 60181994, "order_id": 340322678, "created_at": "2017-10-22T06:06:54.000Z", "funds": { "btc": "-0.005", "jpy": "3293.365" }, "pair": "btc_jpy", "rate": "658673.0", "fee_currency": null, "fee": "0.0", "liquidity": "T", "side": "sell" }] });

test('Test refresh', async () => {
  const config = {
    brokers: [
      { broker: Broker.Coincheck, key: '', secret: '' }
    ]
  };
  const ba = new Coincheck.BrokerAdapterImpl({ config });
  const order = { "symbol": "BTCJPY", "type": "Limit", "timeInForce": "None", "id": "28f5d9f1-5e13-4bb7-845c-b1b7f02f5e64", "status": "New", "creationTime": "2017-10-28T01:20:39.320Z", "executions": [], "broker": "Coincheck", "size": 0.01, "side": "Buy", "price": 663000, "cashMarginType": "MarginOpen", "sentTime": "2017-10-28T01:20:39.236Z", "brokerOrderId": "361173028", "lastUpdated": "2017-10-28T01:20:39.416Z" };
  await ba.refresh(order);
  expect(order.status).toBe(OrderStatus.Filled);
});

afterAll(() => {
  nock.restore();
});
